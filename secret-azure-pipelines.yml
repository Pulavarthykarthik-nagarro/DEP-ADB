parameters:
- name: jobName
  type: string
  default: secret_scan
  displayName: Pipeline job name.
- name: jobDisplayName
  type: string
  displayName: Pipeline job display name.
  default: Git Repository Secret Scan
- name: jobCondition
  type: string
  default: succeeded()
  displayName: Secret Scanner scan run condition. Default is succeeded()
- name: jobDependsOn
  type: object
  default: []
  displayName: Determines if the job should depend on another job(s).
- name: secretScannerVersion
  type: string
  default: 0.16.1-1
  displayName: Version of the secret scanner to use
- name: secretScannerUrl
  type: string
  default: https://git.i.mercedes-benz.com/api/v3/repos/secret-scanner/secret-scanner-daimler-internal
  displayName: The URL where the secret scanner client will be downloaded from. Instead of daimler-internal, public can also be used
- name: azureKeyVaultName
  type: string
  displayName: The Azure key vault name containing the sechub secrets.
- name: azureKeyVaultSubscription
  type: string
  displayName: The Azure subscription for the key vault
- name: azureKeyVaultSecretsFilterAppend
  type: string
  displayName: 'Values to append to the Key Vault Secrets Filter (gitTokenSecretName will be there already. Any values added here will be appended to that. Should be comma separated values)'
  default: ''
- name: scanBaseUrl
  type: string
  displayName: The base URL of the repository to scan. Defaults to https://git.i.mercedes-benz.com/
  default: https://git.i.mercedes-benz.com/
- name: scanEnableAllRules
  type: boolean
  displayName: Indicates whether all rules should be activated or not for the scan
  default: true
- name: scanDeepscan
  type: boolean
  displayName: Indicates whether to perform a deepscan or not (scans all branches as well as commit history)
  default: true
- name: scanExclude
  type: string
  displayName: Files or folders to exclude from scanning. Uses gitignore-standard so values need to be separated by new lines. (hint use '|' to allow multi-line) (Use either scanExclude or scanExclusionFilePath, not both)
  default: ''
- name: scanExclusionFilePath
  displayName: path of file that contains list of files/folders to exclude (To specify a file in the root of the repo use "$(Build.SourcesDirectory)/.secretscanner-exclusions") (use gitignore-standard) (Use either scanExclude or scanExclusionFilePath, not both)
  default: ''
- name: falsePositiveFilePath
  type: string
  displayName: Path and name of file containing false positives. Defaults to null (meaning that the scan will not look for a false positives file. To specify a file in the root of the repo use "$(Build.SourcesDirectory)/.secretscanner-false-positives.json")
  default: ''
- name: scanRepository
  type: string
  displayName: The repository to scan (Defaults to $(Build.Repository.Name) )
  default: $(Build.Repository.Name)
- name: gitUserIdSecretName
  type: string
  displayName: The user Id which has the PAT required to read the repository and perform the scan
- name: gitTokenSecretName
  type: string
  displayName: The name of the secret from the KeyVault which contains the PAT required to read the repository and perform the scan
- name: reportPublishArtifacts
  type: boolean
  default: true
  displayName: Indicates whether scan report should be published as build artifacts.
- name: reportSendEmail
  type: boolean
  default: false
  displayName: 'Determines whether the report with the results of the scan will be sent as an email to a user or group. If true then scanReportSendEmailAddress needs to be specified'
- name: reportSendEmailAddress
  type: string
  displayName: 'The email address to send scan results to. Only applicable if scanReportSendEmail = true'
  default: ''
- name: reportIncludeExcel
  type: boolean
  displayName: Will add a copy of the report in excel format
  default: false

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.jobDependsOn }}
  condition: ${{ parameters.jobCondition }}
  displayName: ${{ parameters.jobDisplayName }}
  variables:
  - name: directorySecretScannerClient
    value: $(System.DefaultWorkingDirectory)/../secretscan-${{ parameters.secretScannerVersion }}
  - name: directoryScanResults
    value: $(Build.StagingDirectory)/scan_results
  - name: scanOptionsFalsePositiveFilePath
    value: $[ replace(replace(ne('${{ parameters.falsePositiveFilePath }}', ''), True, format('--false-positives-file {0}', '${{ parameters.falsePositiveFilePath }}')),False,'') ]
  - name: scanOptionsExclusions
    value: $[ replace(replace(ne('${{ parameters.scanExclude }}', ''), True, '--exclude .secretscanner-exclusions'),False,'') ]
  - name: scanOptionsExclusionFilePath
    value: $[ replace(replace(ne('${{ parameters.scanExclusionFilePath }}', ''), True, format('--exclude {0}', '${{ parameters.scanExclusionFilePath }}')),False,'') ]
  - name: scanOptionsDeepscanEnabled
    value: $[ replace(replace(eq('${{ parameters.scanDeepscan }}', 'true'), True, '--deepscan'),False,'') ]
  - name: scanOptionsAllRulesEnabled
    value: $[ replace(replace(eq('${{ parameters.scanEnableAllRules }}', 'true'), True, '--all-rules-enabled'),False,'') ]
  - name: scanOptionsIncludeExcelFormat
    value: $[ replace(replace(eq('${{ parameters.reportIncludeExcel }}', 'true'), True, '--additional-reporting-formats excel'),False,'') ]
  steps:
  - task: AzureKeyVault@1
    displayName: Get security token from vault
    inputs:
        azureSubscription: ${{ parameters.azureKeyVaultSubscription }}
        KeyVaultName: ${{ parameters.azureKeyVaultName }}
        SecretsFilter: '${{ parameters.gitTokenSecretName }}, ${{ parameters.gitUserIdSecretName }}, ${{parameters.azureKeyVaultSecretsFilterAppend}}'
  - task: Bash@3
    displayName: Create directories
    inputs:
        targetType: 'inline'
        script: |
            set -x
            mkdir -p $(directorySecretScannerClient)
            mkdir "$(directoryScanResults)"
  - task: Bash@3
    displayName: Download secret scanner client
    inputs:
        targetType: 'inline'
        workingDirectory: $(directorySecretScannerClient)
        script: >
            wget --quiet --output-document=- --header="Accept: application/vnd.github+json" --header="Authorization: Bearer $(${{ parameters.gitTokenSecretName }})"
            "${{ parameters.secretScannerUrl }}/releases/tags/v${{ parameters.secretScannerVersion }}" 
            | grep -m 1 '${{ parameters.secretScannerUrl }}/releases/assets/[0-9]*' 
            | cut -d '"' -f 4 
            | wget --quiet --input-file=- --header="Accept:application/octet-stream" --header="Authorization: Bearer $(${{ parameters.gitTokenSecretName }})" --output-document=secretscan-cli-dist-${{ parameters.secretScannerVersion }}.zip
  - task: Bash@3
    displayName: Unzip secret scanner Client
    inputs:
        targetType: 'inline'
        workingDirectory: $(directorySecretScannerClient)
        script: |
            unzip -o secretscan-cli-dist-${{ parameters.secretScannerVersion }}.zip
  - task: PowerShell@2
    displayName: 'Create exclusions file'
    condition: and(succeeded(), ne('${{ parameters.scanExclude }}', ''))
    inputs:
        targetType: 'inline'
        workingDirectory: $(directorySecretScannerClient)
        script: |
            $excl = '${{ parameters.scanExclude }}'
            $excl | Out-File .secretscanner-exclusions
        pwsh: true
  - task: Bash@3
    displayName: Execute scan
    inputs:
        targetType: 'inline'
        failOnStderr: true
        workingDirectory: $(directorySecretScannerClient)
        script: >
            ./secretscan 
            --mode githubenterprise 
            --baseurl ${{ parameters.scanBaseUrl }} 
            --personal-accesstoken $(${{ parameters.gitTokenSecretName }}) 
            --repo ${{ parameters.scanRepository }} 
            --username $(${{ parameters.gitUserIdSecretName }}) 
            --scan-output-directory $(directoryScanResults)
            $(scanOptionsFalsePositiveFilePath)
            $(scanOptionsExclusions)
            $(scanOptionsExclusionFilePath)
            $(scanOptionsDeepscanEnabled)
            $(scanOptionsAllRulesEnabled)
            $(scanOptionsIncludeExcelFormat)
  - task: PublishPipelineArtifact@1
    displayName: 'Publish results'
    condition: ${{ eq(parameters.reportPublishArtifacts, 'true') }}
    inputs:
        targetPath: '$(directoryScanResults)'
        artifact: 'Scan Results $(System.JobDisplayName)'
        publishLocation: 'pipeline'
  - task: SendEmail@1
    displayName: Email results
    condition: ${{ eq(parameters.reportSendEmail, 'true') }}
    inputs:
        body: 'Please check attachments for the report'
        recipients: ${{ parameters.reportSendEmailAddress }}
        subject: 'Results - Secret Scan - ${{ parameters.scanRepository }}'
        isHtml: false
        attachmentFile: '$(directoryScanResults)/secret-scan-session.json'